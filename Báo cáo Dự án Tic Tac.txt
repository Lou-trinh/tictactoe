Báo cáo Dự án Tic-Tac-Toe
1. Tổng quan về dự án

Đây là một dự án game Tic-Tac-Toe có thể chơi online với nhiều người. Mục đích chính là tạo ra một sân chơi trên web. Backend của game là NestJS, còn Frontend thì do Vue.js đảm nhiệm. Ứng dụng sử dụng WebSocket để hỗ trợ tương tác thời gian thực giữa client và server. Dữ liệu game được lưu trên MongoDB. Toàn bộ mã nguồn để trên GitHub và được triển khai lên Railway để chạy tự động, cực kỳ tiện lợi.

2. Những Công nghệ chính trong dự án

    Backend - NestJS: Game được xây dựng bằng NestJS. Nó siêu mạnh và dùng TypeScript nên code rất gọn gàng, dễ quản lý. Mọi logic xử lý game hay kết nối database đều nằm ở đây.

    Frontend - Vue.js: Vue.js nhẹ và linh hoạt, giúp mình xây dựng giao diện chơi game một cách nhanh chóng. Pinia thì lo vụ quản lý trạng thái, giúp game không bị "rối loạn" khi có nhiều người chơi cùng lúc.

    Database - MongoDB: lưu trữ dữ liệu. Vì là game, dữ liệu cần linh hoạt nên MongoDB là lựa chọn rất hợp lý.

    WebSocket: Sử dụng thư viện @nestjs/websockets và socket.io để xử lý giao tiếp thời gian thực giữa backend và frontend. Khi có một người đi nước cờ mới, nó sẽ ngay lập tức thông báo cho tất cả người chơi 
    	       khác,giúp trận đấu không có độ trễ.

    GitHub & Railway: GitHub được sử dụng làm nền tảng quản lý mã nguồn Quy trình CI/CD được tích hợp thông qua GitHub Actions để tự động hóa kiểm tra mã và triển khai.
    		      Railway: Nền tảng triển khai ứng dụng đơn giản, hỗ trợ cả backend và frontend, tích hợp tốt với MongoDB. Hỗ trợ triển khai containerized thông qua Docker.
    		      
3. Cấu trúc dự án

Đây là cách tổ chức các file và thư mục cho gọn gàng, chia thành 2 phần chính là backend và frontend.
3.1. Backend (NestJS)

backend/
├── src/
│   ├── game/
│   │   ├── schemas/
│   │   │   └── game.schema.ts      (Định nghĩa bảng 'games' trong database)
│   │   ├── game.gateway.ts         (Xử lý các thông tin qua WebSocket)
│   │   ├── game.module.ts          (Module tập hợp các thành phần của game)
│   │   └── game.service.ts         (Chứa logic xử lý game)
│   ├── app.controller.ts           (Điều phối các yêu cầu)
│   ├── app.module.ts               (Module chính của ứng dụng)
│   ├── app.service.ts              (Service chính)
│   └── main.ts                     (Nơi khởi động ứng dụng)
├── dist/                           (Các file đã được "đóng gói")
├── node_modules/                   (Các thư viện "đồ nghề")
├── .gitignore                      (Những file không muốn đưa lên GitHub)
├── ...                             (Một số file cấu hình khác)
└── package.json                    (Danh sách các "đồ nghề" cần dùng)

3.2. Frontend (Vue.js)

frontend/
├── node_modules/                   (Các thư viện "đồ nghề" của frontend)
├── public/                         (Chứa các file tĩnh)
│   └── favicon.ico                 (Icon trang web)
├── src/
│   ├── router/
│   │   └── index.ts                (Thiết lập các đường link)
│   ├── stores/
│   │   └── counter.ts              (Quản lý trạng thái)
│   ├── views/
│   │   ├── GameView.vue            (Màn hình chơi game)
│   │   └── HomeView.vue            (Màn hình trang chủ)
│   ├── App.vue                     (Thành phần chính của giao diện)
│   ├── main.ts                     (Nơi khởi động ứng dụng)
│   └── style.css                   (File CSS)
├── .gitignore                      (Những file không muốn đưa lên GitHub)
├── ...                             (Một số file cấu hình khác)
└── package.json                    (Danh sách các "đồ nghề" cần dùng)

4. Giao tiếp và Triển khai

    Tương tác WebSocket:
    - Backend (game.gateway.ts) xử lý các sự kiện game và gửi cập nhật tức thì đến frontend. 
    - Frontend (socket.io-client) lắng nghe các sự kiện này để đồng bộ trạng thái game.

    Quy trình Triển khai: 
    - Mã nguồn được lưu trên nhánh main của GitHub. 
    - Railway tự động theo dõi và triển khai lại ứng dụng (rebuild & deploy) mỗi khi có thay đổi. 
    - Dự án được triển khai thành ba container (backend, frontend, database) trên Railway, với các domain công khai tự động.
